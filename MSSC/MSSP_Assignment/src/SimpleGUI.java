
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author TheThoetha
 */
public class SimpleGUI extends javax.swing.JFrame {

    ImageIcon tickFile = new ImageIcon(SimpleGUI.class.getResource("\\Images\\file-complete-icon.png"));
    ImageIcon warningFile = new ImageIcon(SimpleGUI.class.getResource("\\Images\\file-warning-icon.png"));
    ImageIcon errorFile = new ImageIcon(SimpleGUI.class.getResource("\\Images\\help-file-icon.png"));

    /**
     * Creates new form SimpleGUI
     */
    public SimpleGUI() {
        initComponents();

        setupGUI();

        this.setLocationRelativeTo(null);
        this.setTitle("MSSP Virus Signature Scanner C012952A");

        for (int b = 0; b < searchDirectoryList.size(); b++) {
            directoryDisplay.append(searchDirectoryList.get(b) + "\n");
        }

        for (int c = 0; c < executableCriteriaList.size(); c++) {
            executableFileDisplay.append(executableCriteriaList.get(c) + " ");
        }

        for (int c = 0; c < signatureFileList.size(); c++) {
            signatureDisplay.append(signatureFileList.get(c) + "\n");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optionsPanel = new javax.swing.JPanel();
        addExtensionButton = new javax.swing.JButton();
        executableScroll = new javax.swing.JScrollPane();
        executableFileDisplay = new javax.swing.JTextArea();
        executableLabel = new javax.swing.JLabel();
        addDirectoryButton = new javax.swing.JButton();
        searchLabel = new javax.swing.JLabel();
        addExtensionField = new javax.swing.JTextField();
        extensionLabel = new javax.swing.JLabel();
        searchScroll = new javax.swing.JScrollPane();
        directoryDisplay = new javax.swing.JTextArea();
        resetDirectoriesButton = new javax.swing.JButton();
        resetExtensionsButton = new javax.swing.JButton();
        virusLabel = new javax.swing.JLabel();
        virusScroll = new javax.swing.JScrollPane();
        signatureDisplay = new javax.swing.JTextArea();
        addSignatureButton = new javax.swing.JButton();
        resetSignatureButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        searchPanel = new javax.swing.JPanel();
        resultScroll = new javax.swing.JScrollPane();
        scanDisplayTextArea = new javax.swing.JTextArea();
        searchProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        optionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        addExtensionButton.setText("Add");
        addExtensionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addExtensionButtonActionPerformed(evt);
            }
        });

        executableFileDisplay.setEditable(false);
        executableFileDisplay.setColumns(20);
        executableFileDisplay.setLineWrap(true);
        executableFileDisplay.setRows(5);
        executableFileDisplay.setWrapStyleWord(true);
        executableScroll.setViewportView(executableFileDisplay);

        executableLabel.setText("Executable Criteria");

        addDirectoryButton.setText("Add");
        addDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDirectoryButtonActionPerformed(evt);
            }
        });

        searchLabel.setText("Search Criteria");

        addExtensionField.setText(".exe");
        addExtensionField.setMinimumSize(new java.awt.Dimension(6, 23));
        addExtensionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addExtensionFieldActionPerformed(evt);
            }
        });

        extensionLabel.setText("Add Extension");

        directoryDisplay.setEditable(false);
        directoryDisplay.setColumns(20);
        directoryDisplay.setRows(5);
        searchScroll.setViewportView(directoryDisplay);

        resetDirectoriesButton.setText("Reset");
        resetDirectoriesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetDirectoriesButtonActionPerformed(evt);
            }
        });

        resetExtensionsButton.setText("Reset");
        resetExtensionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetExtensionsButtonActionPerformed(evt);
            }
        });

        virusLabel.setText("Virus Signature Files");

        signatureDisplay.setEditable(false);
        signatureDisplay.setColumns(20);
        signatureDisplay.setRows(5);
        virusScroll.setViewportView(signatureDisplay);

        addSignatureButton.setText("Add");
        addSignatureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSignatureButtonActionPerformed(evt);
            }
        });

        resetSignatureButton.setText("Reset");
        resetSignatureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSignatureButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Scan");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        statusLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        statusLabel.setText("Filler");

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(virusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(searchLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addExtensionField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(extensionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, optionsPanelLayout.createSequentialGroup()
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(executableLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, optionsPanelLayout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, optionsPanelLayout.createSequentialGroup()
                                .addComponent(virusScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addSignatureButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(resetSignatureButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, optionsPanelLayout.createSequentialGroup()
                                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(executableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(searchScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addDirectoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(resetDirectoriesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addExtensionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(resetExtensionsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(virusLabel)
                .addGap(6, 6, 6)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addComponent(addSignatureButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetSignatureButton))
                    .addComponent(virusScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchLabel)
                .addGap(6, 6, 6)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addComponent(addDirectoryButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetDirectoriesButton))
                    .addComponent(searchScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(executableLabel)
                .addGap(6, 6, 6)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addComponent(addExtensionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetExtensionsButton))
                    .addComponent(executableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(extensionLabel)
                .addGap(0, 0, 0)
                .addComponent(addExtensionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        searchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Results\n"));

        scanDisplayTextArea.setEditable(false);
        scanDisplayTextArea.setColumns(20);
        scanDisplayTextArea.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        scanDisplayTextArea.setForeground(new java.awt.Color(153, 0, 0));
        scanDisplayTextArea.setRows(5);
        resultScroll.setViewportView(scanDisplayTextArea);

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(resultScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 824, Short.MAX_VALUE)
            .addComponent(searchProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addComponent(resultScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addExtensionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addExtensionButtonActionPerformed
        // TODO add your handling code here:       
        boolean addExecutable = true;

        for (int b = 0; b < executableCriteriaList.size(); b++) {

            String s2 = executableCriteriaList.get(b);
            String s1 = addExtensionField.getText();

            if (s2.equalsIgnoreCase(s1)) {
                addExecutable = false;
            }
        }

        int count = 0;

        for (int i = 0; i < addExtensionField.getText().length(); i++) {
            if (addExtensionField.getText().charAt(i) == '.') {
                count++;
            }
        }

        if (addExtensionField.getText().contains(" ") || count != 1) {
            JOptionPane.showMessageDialog(this,
                    "The extension " + addExtensionField.getText() + " is not a valid and / or only add one extension at a time.",
                    "Executable Criteria Error",
                    JOptionPane.INFORMATION_MESSAGE, errorFile);
        } else {
            if (executableFileDisplay.getText().equalsIgnoreCase("No Exenstion Specified")) {
                executableFileDisplay.setText(null);
            }

            if (addExecutable) {
                executableCriteriaList.add(addExtensionField.getText());
                executableFileDisplay.append(addExtensionField.getText() + " ");
            } else {
                JOptionPane.showMessageDialog(this,
                        "The extension " + addExtensionField.getText() + " already exsists in the executable criteria.",
                        "Executable Criteria Error",
                        JOptionPane.INFORMATION_MESSAGE, errorFile);
            }
        }


    }//GEN-LAST:event_addExtensionButtonActionPerformed

    private void addDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDirectoryButtonActionPerformed
        // TODO add your handling code here:
        boolean addDirectory = true;

        File f = null;

        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Add Directory");
        chooser.setApproveButtonText("Add");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int returnVal = chooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //filter to only blah blah files 
            f = chooser.getSelectedFile();

            for (int b = 0; b < searchDirectoryList.size(); b++) {

                String s2 = searchDirectoryList.get(b).toString();
                String s1 = f.getAbsolutePath();

                if (s2.equalsIgnoreCase(s1)) {
                    addDirectory = false;
                }
            }

            if (f.exists()) {

                if (addDirectory) {
                    if (directoryDisplay.getText().equalsIgnoreCase("No Directories Specified")) {
                        directoryDisplay.setText(null);
                    }

                    searchDirectoryList.add(f);
                    directoryDisplay.append(f.getAbsolutePath() + "\n");

                } else {
                    JOptionPane.showMessageDialog(this,
                            "The Direcorty " + f.getAbsolutePath() + " already exsists in the search criteria.",
                            "Search Criteria Error",
                            JOptionPane.INFORMATION_MESSAGE, errorFile);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "The Direcorty " + f.getAbsolutePath() + " does not exist.",
                        "Search Criteria Error",
                        JOptionPane.INFORMATION_MESSAGE, errorFile);
            }
        }

    }//GEN-LAST:event_addDirectoryButtonActionPerformed

    private void resetDirectoriesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetDirectoriesButtonActionPerformed
        // TODO add your handling code here:
        if (searchDirectoryList.isEmpty()) {

            JOptionPane.showMessageDialog(this,
                    "The Direcorty Criteria is Already Empty.",
                    "Direcorty Criteria Empty",
                    JOptionPane.INFORMATION_MESSAGE, errorFile);
        } else {
            directoryDisplay.setText("No Directories Specified");
            searchDirectoryList.clear();
        }
    }//GEN-LAST:event_resetDirectoriesButtonActionPerformed

    private void resetExtensionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetExtensionsButtonActionPerformed
        // TODO add your handling code here:
        if (executableCriteriaList.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "The Exenstion Criteria is Already Empty.",
                    "Exenstion Criteria Empty",
                    JOptionPane.INFORMATION_MESSAGE, errorFile);
        } else {
            executableFileDisplay.setText("No Exenstion Specified");
            executableCriteriaList.clear();
        }
    }//GEN-LAST:event_resetExtensionsButtonActionPerformed

    private void resetSignatureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetSignatureButtonActionPerformed
        // TODO add your handling code here:
        if (signatureFileList.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "The Signature Criteria is Already Empty.",
                    "Signature Criteria Empty",
                    JOptionPane.INFORMATION_MESSAGE, errorFile);
        } else {
            signatureDisplay.setText("No Signature File Specified");
            signatureFileList.clear();
        }
    }//GEN-LAST:event_resetSignatureButtonActionPerformed

    private void addSignatureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSignatureButtonActionPerformed
        // TODO add your handling code here:

        boolean addSignateFile = true;
        File f = null;

        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Signature Files", "txt", "text");
        chooser.setFileFilter(filter);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setDialogTitle("Add Virus Signature File");
        chooser.setApproveButtonText("Add");

        int returnVal = chooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //filter to only blah blah files 
            f = chooser.getSelectedFile();

            for (int b = 0; b < signatureFileList.size(); b++) {

                String s2 = signatureFileList.get(b).toString();
                String s1 = f.getAbsolutePath();

                if (s2.equalsIgnoreCase(s1)) {
                    addSignateFile = false;

                }
            }

            if (f.exists()) {

                if (f.getAbsoluteFile().toString().endsWith(".txt")) {

                    if (addSignateFile) {
                        if (signatureDisplay.getText().equalsIgnoreCase("No Signature File Specified")) {
                            signatureDisplay.setText(null);
                        }
                        signatureDisplay.append(f.getAbsolutePath() + "\n");
                        signatureFileList.add(f);
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "The file " + f.getAbsolutePath() + " already exsists in the virus signature files list.",
                                "Virus Signature File Error",
                                JOptionPane.INFORMATION_MESSAGE, errorFile);
                    }

                } else {
                    JOptionPane.showMessageDialog(this,
                            "The file " + f.getAbsolutePath() + " is not valid. (please select a .txt file)",
                            "Virus Signature File Error",
                            JOptionPane.INFORMATION_MESSAGE, errorFile);

                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "The file " + f.getAbsolutePath() + " does not exist.",
                        "Virus Signature File Error",
                        JOptionPane.INFORMATION_MESSAGE, errorFile);

            }
        }
    }//GEN-LAST:event_addSignatureButtonActionPerformed

    static ArrayList<String> executableCriteriaList = new ArrayList();
    static ArrayList<File> searchDirectoryList = new ArrayList();
    static ArrayList<File> signatureFileList = new ArrayList();

    private void setupGUI() {

        String str = "<html>" + "<font color=\"#000000\">" + "Status: " + "<b>" + "No Scan Active" + "</b>" + "</font>" + "</html>";
        statusLabel.setText(str);

        timer = new Timer(10, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {

                if (bool) {

                    if (i == 100) {

                        searchProgressBar.setValue(0);
                        i = 0;
                    } else {

                        searchProgressBar.setValue(i);

                    }
                    i = i + 1;

                } else {

                    if (t1.errorScan) {
                        String str = "<html>" + "<font color=\"#BB6D3E\">" + "Status: " + "<b>" + "Error" + "</b>" + "</font>" + "</html>";
                        statusLabel.setText(str);
                        statusLabel.setForeground(new java.awt.Color(0, 153, 0));
                    } else if (t1.cleanScan) {
                        String str = "<html>" + "<font color=\"#217346\">" + "Status: " + "<b>" + "Scan completed." + "</b>" + "</font>" + "</html>";
                        statusLabel.setText(str);
                        statusLabel.setForeground(new java.awt.Color(33, 115, 70));
                    } else {
                        String str = "<html>" + "<font color=\"#FF0000\">" + "Status: " + "<b>" + "Scan completed." + "</b>" + "</font>" + "</html>";
                        statusLabel.setText(str);

                    }

                    jButton1.setEnabled(true);
                    searchProgressBar.setValue(100);
                    timer.stop();

                }
            }
        });

    }

    private void reset() {
        jButton1.setEnabled(false);
        bool = true;
        searchProgressBar.setValue(0);

        i = 0;

        timer.start();

        t1.setExecutableCriteriaList(executableCriteriaList);
        t1.setSearchDirectoryList(searchDirectoryList);
        t1.setSearchSig(signatureFileList);

        t1.setBoolGo(bool);
        t1.setMainGUI(this);
        t1.setUpdateTimer(timer);
        t1.setScanDisplayTextArea(scanDisplayTextArea);
        t1.setErrorScan(false);
        t1.setCleanScan(false);
        t1.setStatusLabel(statusLabel);
    }

    public void setBool(boolean bool) {
        this.bool = bool;
    }

    boolean bool;
    Timer timer;

    int i;
    ProcessFilesThread t1 = new ProcessFilesThread();

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        reset();

        Thread t2 = new Thread(t1);
        t2.start();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void addExtensionFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addExtensionFieldActionPerformed
        // TODO add your handling code here:
        addExtensionButton.doClick();
    }//GEN-LAST:event_addExtensionFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimpleGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimpleGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimpleGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimpleGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SimpleGUI().setVisible(true);
            }
        });

        String path = "C:\\Test";
        searchDirectoryList.add(new File(path));


        String extension1 = ".exe";
        executableCriteriaList.add(extension1);
        String extension2 = ".bat";
        executableCriteriaList.add(extension2);
        String extension3 = ".com";
        executableCriteriaList.add(extension3);
        String extension4 = ".scr";
        executableCriteriaList.add(extension4);
        String extension5 = ".pif";
        executableCriteriaList.add(extension5);

        String defaultSig3 = "C:\\Users\\TheThoetha\\Desktop\\MSSC\\MSSP_Test_Files\\Signature Files\\Virus Signature File 3.txt";
        signatureFileList.add(new File(defaultSig3));
        
        String defaultSig2 = "C:\\Users\\TheThoetha\\Desktop\\MSSC\\MSSP_Test_Files\\Signature Files\\Virus Signature File 2.txt";
        signatureFileList.add(new File(defaultSig2));
        
        String defaultSig1 = "C:\\Users\\TheThoetha\\Desktop\\MSSC\\MSSP_Test_Files\\Signature Files\\Virus Signature File 1.txt";
        signatureFileList.add(new File(defaultSig1));

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDirectoryButton;
    private javax.swing.JButton addExtensionButton;
    private javax.swing.JTextField addExtensionField;
    private javax.swing.JButton addSignatureButton;
    private static javax.swing.JTextArea directoryDisplay;
    private javax.swing.JTextArea executableFileDisplay;
    private javax.swing.JLabel executableLabel;
    private javax.swing.JScrollPane executableScroll;
    private javax.swing.JLabel extensionLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JButton resetDirectoriesButton;
    private javax.swing.JButton resetExtensionsButton;
    private javax.swing.JButton resetSignatureButton;
    private javax.swing.JScrollPane resultScroll;
    private static javax.swing.JTextArea scanDisplayTextArea;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JProgressBar searchProgressBar;
    private javax.swing.JScrollPane searchScroll;
    private javax.swing.JTextArea signatureDisplay;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel virusLabel;
    private javax.swing.JScrollPane virusScroll;
    // End of variables declaration//GEN-END:variables

}
